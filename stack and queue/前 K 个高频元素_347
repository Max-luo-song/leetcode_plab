/*
 *  算法思想：本题要求前k个高频，适用于堆结构。维护小顶堆，大小为k。最终是输出堆即可。
 *           小顶堆可以使用优先队列实现，实现的方式有关于priority_queue的用法
*/
class Solution {
public:
    // 设置优先队列的优先规则
    class mycomparision {
        public:
            bool operator()(const pair<int, int>&lhs, const pair<int, int>&rhs) {
                return lhs.second > rhs.second;
            }
    };
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> map;
        // 利用map统计个数
        for (int i=0; i<nums.size(); i++) {
            map[nums[i]]++;
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, mycomparision> pri_que; // priority_queue的定义方式
        for (unordered_map<int, int>::iterator it = map.begin(); it != map.end(); it++) {
            pri_que.push(*it);
            if (pri_que.size() > k)
                pri_que.pop();
        }
        vector<int> result;
        for (int i=0; i<k; i++) {
            result.push_back(pri_que.top().first);
            pri_que.pop();
        }
        return result;
    }
};
