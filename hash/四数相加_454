/*
 *  算法思想：本题相较于两数之和更复杂，但总体还是采用map的思想。将四个数字两两划分，前两个的所有取值作为map的key值，出现的个   
 *    数作为键值。先二次循环统计，在二次循环另外一对。还是使用find+end的组合，依据和为0的条件
*/
class Solution {
public:
    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {
        unordered_map<int,int> map;
        for (int i=0; i<A.size(); i++) {
            for (int j=0; j<B.size(); j++) {
                map[A[i]+B[j]]++;
            }
        }
        int count = 0;
        for (int i=0; i<C.size(); i++) {
            for (int j=0; j<D.size(); j++) {
                if (map.find(0-(C[i]+D[j])) != map.end()) {   // 寻找的目标是0-(C[i]+D[j])
                    count += map[0-(C[i]+D[j])];
                }
            }
        }
        return count;
    }
};
