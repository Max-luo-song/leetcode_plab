// 错误思路：求连续的最长摆动序列
/*class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        if (nums.size() <= 2)
            return nums.size();
        vector<int> temp(nums.size()-1);
        for (int i=0; i<nums.size()-1; i++) {
            temp[i] = nums[i+1]-nums[i];
        }
        int max = INT_MIN;
        int count = 1;
        for (int i=0; i<temp.size()-1; i++) {
            if ((temp[i] > 0 && temp[i+1] < 0) ||(temp[i] < 0 && temp[i+1] > 0))
                count++;
            else {
                if (count > max)
                    max = count;
                count = 1;
            }
        }
        return count+1;
    }
};*/
/*
 *  算法思想：本题理解题意错误，不是要求连续。只要保持相对顺序就行。画出曲线图就是寻找尖的位置
*/
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        if (nums.size() <= 1)
            return nums.size();
        int result = 1; // result初始化为1，是把最右边的看作基本的
        int cur_data = 0;
        int pre_data = 0;
        for (int i=1; i<nums.size(); i++) {
            cur_data = nums[i]-nums[i-1];
            if ((cur_data>0&&pre_data<=0) || (cur_data<0&&pre_data>=0)) { // pre_data中有0为了防止边界条件，过程中的相等序列进不来，因为pre_data来自cur_data，如果cur_data为0是进不来的，不可能赋值给pre_data。pre_data为0只可能是虚拟一个节点（针对于只有两个的时候）
                result++;
                pre_data = cur_data;
            }
        }
        return result;
    }
};
