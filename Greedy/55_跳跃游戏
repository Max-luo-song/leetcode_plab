/*
 *  算法思想：本题输入贪心方法，但不是按照不停前进。而是判断走到每个位置后最远的覆盖范围。
 *            如果覆盖范围到达最后一个了，就可以。局部最优是能覆盖的最远范围，不是不断前进的最大距离
*/
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int cover = 0;
        if (nums.size() == 1) // 1的时候特殊处理
            return true;
        for (int i=0; i<=cover; i++) { // 根据范围判断前进
            cover = max(i+nums[i], cover); // 判断最远的覆盖范围
            if (cover >= nums.size()-1)
                return true;
        }
        return false;
    }
};
