/*
 *  算法思想：本题需要理解题意，寻找特点。对题型进行判断，本题是贪心问题并且有两个纬度。对于两个维度的贪心问题，先寻找一个维度作
 *            为基础，在进行处理
 *            本题排列序号乱，没有什么参考价值。使用身高作为维度，从高到低（序号排列的方法是从高到低）。根据序号进行插入，从0开始
 *            的情况下序号就应该是插入的位置（保证前面比自己大的符合要求）。若是相等，优先于低的。符合从高到低的排序，低的在前面
*/
class Solution {
public:
    static bool cmp(vector<int>& a, vector<int>& b) {
        if (a[0] == b[0]) // 
            return a[1] < b[1]; // 身高相同返回序号小的
        else
            return a[0] > b[0];
    }
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        sort(people.begin(), people.end(), cmp);
        vector<vector<int>> que;
        for (int i=0; i<people.size(); i++) {
            int position = people[i][1];
            que.insert(que.begin()+position, people[i]); // insert的使用方法，insert(位置，内容).此处内容是vector<int>,所以是postion[i]
        }
        return que;
    }
};
