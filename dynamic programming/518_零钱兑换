/*
 *      算法思想：回溯法超时
*/
/*class Solution {
public:
    int count = 0;
    int sum = 0;
    void back(int amount, vector<int>& coins, int startIndex) {
        if (sum == amount) {
            count++;
            return ;
        }
        if (sum > amount)
            return ;
        for (int i=startIndex; i<coins.size(); i++) {
            sum += coins[i];
            back(amount, coins, i);
            sum -= coins[i];
        }
    }
    int change(int amount, vector<int>& coins) {
        back(amount, coins, 0);
        return count;
    }
};*/
// dp[i]代表总金额为i时的方式
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        sort(coins.begin(), coins.end());
        vector<int> dp(amount+1, 0);
        dp[0] = 1; // dp[0]需要被初始化为1，代表总金额为0的方案有一种，全部取0
        // 组合时，物品在外层，背包容量在内层
        // 排列时，物品在内层，背包容量在外层
        // 对于完全背包问题，背包容量从左到右遍历
        for (int i=0; i<coins.size(); i++) { // 遍历物品
            for (int j=coins[i]; j<=amount; j++) { // 遍历背包容量
                dp[j] += dp[j-coins[i]]; // 统计个数，状态转移方程是这个
            }
        }
        return dp[amount];
    }
};
