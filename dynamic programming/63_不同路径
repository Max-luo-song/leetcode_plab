/*
 *  算法思想：本题是动态规划问题，对普通路径进行更改。加上约束条件即可
*/
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<int> temp(n, 0);
        vector<vector<int>> dp(m, temp);
        // 初始化时遇到障碍后面都应该是0，所以需要break
        for (int i=0; i<n; i++) {
            if (obstacleGrid[0][i] != 1)
                dp[0][i] = 1;
            else 
                break;
        }
        for (int i=0; i<m; i++) {
            if (obstacleGrid[i][0] != 1)
                dp[i][0] = 1;
            else
                break;
        }
        // 遍历时分四种情况：1.障碍物 2.左侧障碍 3.上方障碍 4.左上均无障碍
        for (int i=1; i<m; i++) {
            for (int j=1; j<n; j++) {
                if (obstacleGrid[i][j] == 1) // 情况1
                    continue;
                else {
                    if (obstacleGrid[i-1][j] == 1) // 情况2
                        dp[i][j] = dp[i][j-1];
                    else if (obstacleGrid[i][j-1] == 1) // 情况3
                        dp[i][j] = dp[i-1][j];
                    else
                        dp[i][j] = dp[i-1][j]+dp[i][j-1]; // 情况4
                }
            }
        }
        return dp[m-1][n-1];
    }
};
