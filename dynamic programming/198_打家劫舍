/*
 *  算法思想：本题不是背包问题，属于常规的动态规划。总结出递推方程：dp[i] = max(dp[i-1],dp[i-2]+nums[i])
 *            dp[i]的含义是包括第i个屋子，最多的钱数。
 *            遍历的方式就是从前往后
*/
class Solution {
public:
    int rob(vector<int>& nums) {
        // 初始化考虑多种情况
        if (nums.size() == 0)
            return 0;
        else if (nums.size() == 1)
            return nums[0];
        else if (nums.size() == 2)
            return max(nums[0], nums[1]);
        vector<int> dp(nums.size(), 0);
        dp[0] = nums[0];
        dp[1] = max(nums[0],nums[1]);
        for (int i=2; i<nums.size(); i++) {
            dp[i] = max(dp[i-1], dp[i-2]+nums[i]);
        }
        return dp[nums.size()-1];      
    }
};
