#include<bits/stdc++.h>
using namespace std;

/*void dp_function() {
	vector<int> weight = {1,3,4};
	vector<int> value = {15,20,30};
	int bagWeight = 4;
	
	vector<int> temp(bagWeight+1, 0);
	vector<vector<int>> dp(weight.size(), temp);
	
	// 纵向初始化，背包容量为0，都装不下 
	for (int i=0; i<dp.size(); i++) {
		dp[i][0] = 0;
	}
	// 横向初始化，容量大于重量的用物品0的价值初始化 
	for (int j=bagWeight; j>=weight[0]; j--) {
		dp[0][j] = value[0];
	}
	for (int i=1; i<dp.size(); i++) {
		for (int j=1; j<dp[0].size(); j++) {
			if (j < weight[i]) // 背包容量比体积小 
				dp[i][j] = dp[i-1][j];
			else
				dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]]+value[i]); // 容量比体积大，在加和不加中选择 
		}
	}
	for (int i=0; i<dp.size(); i++) {
		for (int j=0; j<dp[0].size(); j++) {
			cout << dp[i][j] << " ";
		}
		cout << endl;
	}
	cout << dp[dp.size()-1][dp[0].size()-1] << endl;
	
}*/
// 一维滚动表示，背包问题使用相邻两层。可进行空间优化 
void dp_function() {
	vector<int> weight = {1,3,4};
	vector<int> value = {15,20,30};
	int bagWeight = 4;
	vector<int> dp(bagWeight+1, 0);
	
	for (int i=0; i<=weight.size(); i++) { // 遍历物品 
		for (int j=bagWeight; j>=weight[i]; j--) { // 遍历体积，必须从后往前。只需更新比物品体积大(>=)的位置即可 
			dp[j] = max(dp[j], dp[j-weight[i]]+value[i]);
		}
	}
	cout << dp[bagWeight] << endl;
} 
int main(void) {
	dp_function();
	return 0;
}
