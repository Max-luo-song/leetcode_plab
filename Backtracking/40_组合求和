/*
 *  算法思想：本题是回溯组合的另一种题型，集合中每个数字只能使用一次，但是组合中还有重复的
 *            主要问题就是进行去重，去重包括两种：一条路径上去重和同层去重。本题就是同层去重
 *            通过used数组，如果相同，并且上一个没有用过说明
*/
class Solution {
public:
    vector<vector<int>> ending;
    vector<int> path;
    int sum = 0;
    void back(vector<int>& candidates, int target, int startIndex, vector<bool>& used) {
        if (sum > target)
            return;
        if (sum == target)  {
            ending.push_back(path);
            return ;
        }
            
        for (int i=startIndex; i<candidates.size(); i++) {
            if (i>0 && candidates[i] == candidates[i-1] && used[i-1] == false) { // used为false说明可以被选取，说明同层有重复
                continue;
            }
            sum += candidates[i];
            used[i] = true; // 访问过为true
            path.push_back(candidates[i]);
            back(candidates, target, i+1, used);
            sum -= candidates[i];
            used[i] = false;
            path.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<bool> used(candidates.size(), false);
        sort(candidates.begin(), candidates.end());
        back(candidates, target, 0, used);
        return ending;
    }
};
