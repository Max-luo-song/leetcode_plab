/*
 *  算法思想：本题是经典问题N皇后，但使用递归实现特别方便。在模板的基础上稍作判断即可。
 *            但需要进行分析，抽象成树的时候。行数是树的深度，列数是树的宽度。
 *            深度使用递归实现，宽度使用for循环。对于棋子的处理初始化一个全空，慢慢增加
*/
class Solution {

private:
    vector<vector<string>> ending;
    // 直接判断是否有效
    bool isValid(int n, int col, int row, vector<string>& path) {
        // i是行，k是列
        for (int i=0; i<row; i++) {
            int k;
            for (k=0; k<n; k++) {
                if (path[i][k] == 'Q')
                    break;
            } 
            if (k == col || abs(i-row) == abs(k-col))
                return false;
        }
        return true;
    }
    void back(int n, int row, vector<string>& path) {
        if (row == path.size()) {
            ending.push_back(path);
            return ;
        }
        for (int i=0; i<n; i++) {
            // 有效放入，进行递归
            if (isValid(n, i, row, path)) {
                path[row][i] = 'Q';
                back(n, row+1, path);
                path[row][i] = '.'; // 回溯体现在Q变为.
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<string> path(n, string(n, '.'));
        back(n, 0, path);
        return ending;
    }
};
