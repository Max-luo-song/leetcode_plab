/* 回溯模板：
void backtracking(参数) {
    if (终止条件) {
        存放结果;
        return;
    }

    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
        处理节点;
        backtracking(路径，选择列表); // 递归
        回溯，撤销处理结果
    }
}
*/
/*
 *  算法思想：本题属于经典的回溯算法。套用回溯算法的模板
*/
class Solution {
public:
    vector<vector<int>> ending;
    vector<int> path;
    void back(int n, int k, int startindex) {
        if (path.size() == k) { // 终止条件
            ending.push_back(path);
            return ;
        }
        for (int i=startindex; i<=n; i++) { // 回溯中for循环是主要的组成部分，通过分析将每一层的for循环判断出来是回溯的主要部分
            path.push_back(i); // 主要操作
            back(n, k, i+1); // 递归进入下一层
            path.pop_back(); // 回溯操作
        }
    }
    vector<vector<int>> combine(int n, int k) {
        back(n, k, 1);
        return ending;
    }
};
