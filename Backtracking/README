1.回溯能够解决的问题：
（1）组合问题：N个数里面按一定规则找出k个数的集合
（2）排列问题：N个数按一定规则全排列，有几种排列方式
（3）切割问题：一个字符串按一定规则有几种切割方式
（4）子集问题：一个N个数的集合里有多少符合条件的子集
（5）棋盘问题：N皇后，解数独等等
2.回溯法模板如下：
// 返回值一般是void
void backtracking(参数) {
    if (终止条件) {
        存放结果;
        return;
    }
    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
        处理节点;
        backtracking(路径，选择列表); // 递归
        回溯，撤销处理结果
    }
}
3.回溯法可用树结构来理解，递归代表树的深度，使用for循环代表树的宽度。
4.回溯的剪枝发生在for循环中，如果起点到终点的个数已经不够预定个数就可以进行剪枝。见77
5.回溯法集合问题模板如下（对于集合中元素无重复）：
void backtracking(参数：相关数据+startIndex) {
    if (终止条件) {
        存放结果;
        return;
    }
    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
        处理节点;
        backtracking(路径，startIndex+1); // 集合中元素一次使用。见216 
        backtracking(路径，startIndex); // 集合中元素多次使用。见39
        回溯，撤销处理结果
    }
}
6.对于组合问题，集合中出现相同元素就需要进行去重。常规的去重方式是排序+used数组判断。在回溯的时候别忘加上used数组。见40
7.对于切割问题，多于字符串相关。将字符串划分为子串后，经过字符串有效地判断再进入递归，进行回溯。见131/93
8.对于子集问题，在基础模板上取消了终止条件。对于集合中没有重复元素，元素是否一次/多次使用，模板如上：
（1）backtracking(路径，startIndex+1); // 集合中元素一次使用。见78 
（2）backtracking(路径，startIndex); // 集合中元素多次使用。见90
9.回溯中的去重问题一定要重视，去重的常规方法是排序+used。但有的要求在原地数组去重，可以使用unordered_set搜索实现。used.find(nums[i]) != used.end())实现。见491
10.对于排列问题，区别于组合问题。去掉startIndex，每层for循环都从0开始。使用一个used数组保存这个元素同一树枝是否使用过。其余按照模板来。集合无相同元素，见46
11.对于集合中有相同元素的排列问题，可以按照先排序再去重的思路，利用judge和used两个布尔类型。见47
12.对于具有应用背景的回溯题目，首先判断出回溯的类型。然后按照思路建树，分析什么是高度，什么是宽度。宽度利用for循环，高度利用递归。适时进行剪枝(for循环中continue)。见332/51/37
