/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 /*
  *    算法思想：本题作用是寻找最大深度的公共祖先，希望从底向上，所以采用后序遍历。
  *              两个节点相对于公共祖先（不重合）一定是一左一右。对于更上层的一定在一边
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (root == p || root == q || root == NULL)
            return root;
        TreeNode* left = lowestCommonAncestor(root->left, p, q); // 此处第一个参数是left和right是因为，上面对于p已经做了判断
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        if (left && right) // 找到节点
            return root;
        else if (!left && right) // 在右边
            return right;
        else if (left && !right) // 在左边
            return left;
        else
            return NULL; // 没有
    }
};
