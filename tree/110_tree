/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 /*
  *     算法思想：本题是判断是否平衡，平衡的判断来源于左右子树的高度（从底往上）。优先考虑递归算法，以-1代表不平衡。
  *               求最大深度的过程是从上往下，用前序遍历。求最大高度的过程从下往上，用后序遍历。如果左右子节点有一个不平衡了
  *                说明已经不平衡了，否则判断本层：本层判断的方式是左右子节点差距是否为1。
  *               本题主要希望掌握的是深度和高度之间的区别。使用递归写法的时候，只需要记住区别即可
  *                 还有一种算法是，采用任意一种遍历方式，对左右子节点求深度。如果差距大于1，则有问题。
 */
class Solution {
public:
    int getDepth(TreeNode* root) {
        if (root == NULL)
            return 0;
        // 左
        int left = getDepth(root->left);
        if (left == -1)
            return -1;
        // 右
        int right = getDepth(root->right);
        if (right == -1)
            return -1;        
        // 中
        if (abs(left-right) > 1)
            return -1;
        else
            return 1+max(left,right);
    }

    bool isBalanced(TreeNode* root) {
        return getDepth(root) == -1? false:true;
    }
};
