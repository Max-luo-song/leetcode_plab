/*
    递归交互左右子节点即可
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 /*
  *       算法思想：递归实现翻转，注意返回值，参数类型即可。遍历顺序是先序遍历
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if (root == NULL)
            return NULL;
        TreeNode *p = root->left;
        root->left = root->right;
        root->right = p;
        root->left = invertTree(root->left);
        root->right = invertTree(root->right);
        return root;
    }
};
