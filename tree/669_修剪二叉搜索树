/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 /*
  *     算法思想：对于搜索二叉树的修剪，修剪需要两种类型：
  *               1。比low小的，所有左子树都不要
  *               2。比high大的，所有右子树都不要
  *              本程序中存在两重递归：递归寻找节点，递归进行拼接
 */
class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        if (root == NULL)
            return root;
        if (root->val < low) {
            TreeNode* right = trimBST(root->right, low, high); // 边界节点在右子树，递归寻找
            return right;
        }
        else if (root->val > high) {
            TreeNode* left = trimBST(root->left, low, high); // 边界节点在左子树，递归寻找
            return left;
        }
        root->left = trimBST(root->left, low, high); // 返回左节点，进行修改后的拼接
        root->right = trimBST(root->right, low, high);
        return root;
    }
};
