/*
 *      算法思想：N叉树的深度求解使用了非递归方式（层次遍历），与二叉树的区别是对于左右子树的判断变成了对于children数组的判断
*/
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    int maxDepth(Node* root) {
        if (root == NULL)
            return 0;
        queue <Node *> que;
        que.push(root);
        int depth = 0;
        while (!que.empty()) {
            int num = que.size();
            depth++;
            while (num--) {
               Node *p = que.front(); 
               que.pop();
               for (int i=0; i<p->children.size(); i++) {
                   que.push(p->children[i]);
               }
            }
        }
        return depth;
    }
};
