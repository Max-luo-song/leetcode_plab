/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 /*
  *     算法思想：按照规律，在树的递归实现中。遍历所有结点的没有返回值，遍历部分的有返回值。本题是一条线路上，属于遍历部分
  *               相比于值得累加，在这类递归中更适用于递减判断是否为0.在传递参数的时候可以传递target，但递归中第一句需要是
  *                sum的减法。本题也属于回溯，在常规对于参数的更改中sum需要加法实现回溯，但如果输入参数没有变化的情况下，不
  *               需要进行自加
 */
class Solution {
public:
    bool Cal(TreeNode *root, int &sum) {
        sum -= root->val;
        if (!root->left && !root->right && sum == 0) 
            return true;
        else if (!root->left && !root->right)
            return false;
        if (root->left) {
            if (Cal(root->left, sum)) // 传入参数是sum，不是引用，本身已经进行完回溯。
                return true;          // 传入参数是sum的引用，需要加法完成回溯
            sum += root->left->val;
        }
        if (root->right) {
            if (Cal(root->right, sum))
                return true;
            sum += root->right->val;
        }
        return false;
    }
    bool hasPathSum(TreeNode* root, int targetSum) {
        if (root == NULL)
            return false;
        return Cal(root, targetSum);
    }
};
