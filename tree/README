树：
1.对于树的问题，多使用递归求解。递归的三要素：
（1）确定递归函数的参数和返回值
（2）确定终止条件
（3）确定单层递归的逻辑
2.对于二叉树的前序，后序，中序的递归实现和非递归实现都要清楚.实现方法有很多种，选择其中一种适合自己的即可
前序见144
后序见145
中序见94
3.二叉树的层次遍历使用队列实现，注意模板见102
4.在递归实现二叉树的时候，要选择合适的遍历方法，也要清楚，这样有助于分析
5.二叉树对称的问题要区分是单一树的对称还是左右子树的对称，单一树对称是左右子节点相同，左右子树对称是左子树左节点等于右子树右节点，左子树右节点等于右子树左节点。见101
6.在求二叉树深度的问题上，递归是一种方法，但也可以使用层次遍历，更加通用
7.对于二叉树要区分高度和深度的概念，深度从上而下，高度从下而上，见110
8.二叉树的某一路径问题是回溯问题变形，可以利用回溯模板完成，for变成对于左右子树的处理。见257
9.在树的递归实现中。遍历所有结点的没有返回值，遍历部分的有返回值。但不是绝对，需要根据实际情况判断，但大部分是这样
10.对于构造二叉树问题，使用切割的方法。利用先序/后序/...找出切割点作为根节点。在中序中找出位置，分别划分出左右子树再递归实现。整体后序遍历思想。见106
11.对于二叉搜索树类题目利用其左子树小于根节点，右子树大于根节点。遍历时变成logn的复杂度。同时整体中序遍历为递增数组。见700
12.对于公共祖先的问题，采用从下往上的方法。后序遍历，形成递归。见236
13.对于二叉搜索树的公共祖先问题，可以采用从上往下的先序方法。见235
14.二叉搜索树的增加是根据特性，找到空为就加点。见701
15.二叉搜索树的删除有五种情况，需要详细分析。见450：
（1）没有找到该节点
（2）目标结点的左为空，返回右节点
（3）目标结点的右为空，返回左节点
（4）目标节点的左右都空，删除该节点，返回NULL，可与2，3合并
（5）目标节点左右都不空，对于第五点情况比较复杂，整体按照如下逻辑：寻找目标节点右子树的最左节点A，将目标结点的左子树接到A的左边。 返回目标节点的右节点，对左节点进行删除
