/*
 *  算法思想：二叉树的最小深度的定义是到最近叶子节点的距离，如果根节点左子树为空这种是不算的
 *           也就是不能写成min(Depth(root->left), Depth(root->right));
 *           分为三种情况：左空右不空，右空左不空，左不空右不空。
 *           也可以通过层序遍历（非递归）实现，统计层数。当出现左右子节点均为空时，结果输出
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        // 遍历方式这样看不太出来，其实是后序遍历。先根据左右子节点递归，再求出根节点
        if (root == NULL)
            return 0;
        if (root->left == NULL && root->right != NULL)
            return 1+minDepth(root->right);        
        if (root->right == NULL && root->left != NULL)
            return 1+minDepth(root->left);
        return 1+min(minDepth(root->left), minDepth(root->right));
    }
};
