/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 /*
  *     算法：二叉搜索树的插入有多种方式，但最简单的一种是在树分支空闲处插入。遍历节点直到空闲的时候
  *           就是要插入的地方。因为本题有返回值，所以通过left和right将值返回，构成一颗完整的树 
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if (root == NULL) {
            TreeNode* new_node = new TreeNode(val);
            return new_node;
        }
        if (root->val > val)
            root->left = insertIntoBST(root->left, val); // 通过root返回
        else if (root->val < val)
            root->right = insertIntoBST(root->right, val); // 通过root返回
        return root;
    }
};
