/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


/* 非递归中序遍历
   class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        stack<TreeNode *> _stack;  //栈中必须存的是指针
        vector<int> ending;
        TreeNode* p = root;
        TreeNode* temp;
        while (p != NULL || _stack.size() != 0)
        {
            if (p != NULL)
            {
                _stack.push(p);
                p = p->left;
            }
            else
            {
                temp = _stack.top();
                _stack.pop();
                ending.push_back(temp->val);   
                p = temp->right;
            }
        }
        return ending;
    }
};
*/

//递归中序遍历-在递归实现时，可以把结果作为全局变量，这样可以在本地函数上递归。也可以再额外写一个递归函数，把结果作为其引用传递
class Solution {
public:
    vector<int> ending;
    vector<int> inorderTraversal(TreeNode* root) {
        if (root != NULL) {
            inorderTraversal(root->left);
            ending.push_back(root->val);
            inorderTraversal(root->right);
        }
        return ending;
    }
};
