/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 /*
  *     算法思想：递归实现，复用其中一棵树。当其中一个为空时，返回另一棵树。全不为空时，节点数值累加返回
  *               如果不复用，可以再生成一个节点。相加后赋值，跟着左右子树
 */
class Solution {
public:
    TreeNode* reverse(TreeNode* root1, TreeNode* root2) {
        if (root1 == NULL)
            return root2;
        if (root2 == NULL)
            return root1;
        root1->val += root2->val;
        root1->left = reverse(root1->left, root2->left);
        root1->right = reverse(root1->right, root2->right);
        return root1; 
    }
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        return reverse(root1, root2);
    }
};
