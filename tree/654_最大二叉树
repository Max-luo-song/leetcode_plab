/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 /*
  *     算法思路：整体思路与中序+前/后序相同。以最大值作为切割点，左右生成子树
 */
class Solution {
public:
    TreeNode* reverse(vector<int>& nums, int begin, int end) {
        if (end == begin) // 因为全局使用相同的nums，以begin end为标准，不适用nums.size()
            return NULL;
        int max = INT_MIN;
        int max_num = -1;
        for (int i=begin; i<end; i++) { // 寻找最大值 // 因为全局使用相同的nums，以begin end为标准，不适用nums.size()
            if (nums[i] > max) {
                max = nums[i];
                max_num = i;
            }
        }
        TreeNode* root = new TreeNode(max);
        if (end - begin == 1) // 因为全局使用相同的nums，以begin end为标准，不适用nums.size()
            return root;
        int left_begin = begin;
        int left_end = max_num;
        int right_begin = max_num+1;
        int right_end = end;
        root->left = reverse(nums, left_begin, left_end);
        root->right = reverse(nums, right_begin, right_end);
        return root;
    }
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        if (nums.size() == 0)
            return NULL;
        return reverse(nums, 0, nums.size());
    }
};
