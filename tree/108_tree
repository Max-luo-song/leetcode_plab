/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 /*
  *     算法思想：本题目地是构造二叉树，构造二叉树的方法模板如下：
  *               寻找分割节点，递归构造左右子树。本题分割节点取数组中间点
  *               循环不变量，利用左闭右闭
 */
class Solution {
public:
    TreeNode* reverse(vector<int>& nums, int left, int right) {
        if (left > right)
            return NULL;
            int mid = left + ((right-left)) / 2;
            TreeNode *root = new TreeNode(nums[mid]);
            root->left = reverse(nums, left, mid-1); // 循环不变量是左闭右闭，所以是mid-1和mid+1
            root->right = reverse(nums, mid+1, right);
            return root;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return reverse(nums, 0, nums.size()-1);
    }
};
