/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 /*
  *     算法思想：本题有关于二叉搜索树，可以利用二叉搜索树中间节点大于左节点且小于右节点的特性以加快速度
  *               递归实现较容易想，非递归实现可以不断改变root，做判断后返回
 */
/*class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        if (root == NULL)
            return NULL;
        if (val > root->val)
            return searchBST(root->right, val);
        else if (val < root->val)
            return searchBST(root->left, val);
        else
            return root;
    }
};*/

class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        while (root != NULL) {
            if (root->val < val)
                root = root->right;
            else if (root->val > val)
                root = root->left;
            else    
                return root;
        }
        return NULL;
    }
};
